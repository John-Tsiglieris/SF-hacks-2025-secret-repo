<div class="container mt-5">
  <div class="row">
    <div class="col-12">
      <div id="map" style="height: 400px; width: 100%"></div>
    </div>
  </div>
</div>

<!-- Add Event Modal -->
<div
  class="modal fade"
  id="addEventModal"
  tabindex="-1"
  aria-labelledby="addEventModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addEventModalLabel">Add New Event</h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
          aria-label="Close"
        ></button>
      </div>
      <div class="modal-body"><%- include("./addEvent") %></div>
    </div>
  </div>
</div>

<link
  rel="stylesheet"
  href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
  integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
  crossorigin=""
/>
<script
  src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
  integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
  crossorigin=""
></script>
<script src="/eventModels.js"></script>
<script src="/eventListener.js"></script>
<script src="/mapFunctions.js"></script>

<script>
    // Directly initialize the map since this partial is rendered at the end
    var map = L.map("map").setView([37.7749, -122.4194], 13);

    // Add OpenStreetMap tiles
    L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
      maxZoom: 19,
      attribution:
        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(map);

    // Add a marker to San Francisco
    //   L.marker([37.7749, -122.4194])
    // .addTo(map)
    // .bindPopup("San Francisco")
    // .openPopup();

    // on click handler
    map.on('click', function(e) {
    // Get clicked coordinates
    const lat = e.latlng.lat;
    const lng = e.latlng.lng;

    // Set values in hidden form fields
    document.getElementById('lat').value = lat;
    document.getElementById('long').value = lng;

    // Show the modal
    const addEventModal = new bootstrap.Modal(document.getElementById('addEventModal'));
    addEventModal.show();
  });

    // Additional markers or features can be added here if needed.
    const events = <%- JSON.stringify(events) %>;
    const eventsHash = <%- JSON.stringify(eventsHash) %>;
    // This shoud be populated from the route handler


    document.addEventListener("DOMContentLoaded", () => {
      const eventService = new EventService();

      events.forEach(event => {
        createMarker(map, event);

        const newEvent = {
          id: event.id,
          users_id: event.users_id,
          time_created: event.time_created,
          data: event.data,
          severity: event.severity,
          authority: event.authority,
          lat: event.lat,
          long: event.long
        };
        addNewEvent(newEvent);
        console.log("New event added from initial list:", newEvent);
      });

      // Set up event handlers
      eventService.setHandler("connect", () => {
        updateStatus("connected", "Connected to WebSocket server");
      });

      eventService.setHandler("event", (data) => {
        addLogEntry("event", `Event ${data.operation}:`, data.record);

        if (data.operation === "INSERT") {
          const event = data.record;
          eventsHash[event.id] = event;
          events.push(event);

          createMarker(map, event)
          const newEvent = {
            id: event.id,
            users_id: event.users_id,
            time_created: event.time_created,
            data: event.data,
            severity: event.severity,
            authority: event.authority,
            lat: event.lat,
            long: event.long
          };
          addNewEvent(newEvent);



        } else if (data.operation === "UPDATE") {
          const event = eventsHash[data.record.id];

          if (event) {
            event.data = data.record.data;
            event.authority = data.record.authority;
            event.severity = data.record.severity;
            event.time_created = data.record.time_created;
            event.lat = data.record.lat;
            event.long = data.record.long;
          } else {
            addLogEntry("error", `Event ${data.record.id} not found`);
          }

        } else if (data.operation === "DELETE") {
          const event = eventsHash[data.record.id];
          if (event) {
            delete eventsHash[data.record.id];
            const index = events.indexOf(event);
            if (index > -1) {
              events.splice(index, 1);
            }
          } else {
            addLogEntry("error", `Event ${data.record.id} not found`);
          }
        } else if (data.operation === "TEST") {
          //
        }
      });

      eventService.setHandler("error", (error) => {
        updateStatus("error", `Error: ${error.message || "Unknown error"}`);
      });

      eventService.setHandler("message", (event) => {

        if (typeof event === "object" && event.type) {
          addLogEntry(event.type, event.message, event.data);
        } else {
          addLogEntry("raw", "Raw message:", event);
        }
      });

      eventService.setHandler("close", () => {
        updateStatus("connecting", "Disconnected. Attempting to reconnect...");
      });

      // Clean up when leaving the page
      window.addEventListener("beforeunload", () => {
        eventService.close();
      });


    });

    function addLogEntry(type, message, data) {
          console.log(`[Log] ${type}: ${message}`, data || "");
    }

    function updateStatus(state, message) {
          console.log(`[Status] ${state}: ${message}`);
        }
</script>
