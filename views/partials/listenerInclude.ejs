<script src="/eventModels.js"></script>
<script src="/eventListener.js"></script>

<script>
  const events = <%- JSON.stringify(events) %>;
  const eventsHash = <%- JSON.stringify(eventsHash) %>;
  // This shoud be populated from the route handler


  document.addEventListener("DOMContentLoaded", () => {
    const eventService = new EventService();

    // Set up event handlers
    eventService.setHandler("connect", () => {
      updateStatus("connected", "Connected to WebSocket server");
    });

    eventService.setHandler("event", (data) => {
      addLogEntry("event", `Event ${data.operation}:`, data.record);

      if (data.operation === "INSERT") {
        console.log("***", data.record);
        const event = data.record;
        eventsHash[event.id] = event;
        events.push(event);

      } else if (data.operation === "UPDATE") {
        const event = eventsHash[data.record.id];

        if (event) {
          event.data = data.record.data;
          event.authority = data.record.authority;
          event.severity = data.record.severity;
          event.time_created = data.record.time_created;
          event.lat = data.record.lat;
          event.long = data.record.long;
        } else {
          addLogEntry("error", `Event ${data.record.id} not found`);
        }

      } else if (data.operation === "DELETE") {
        const event = eventsHash[data.record.id];
        if (event) {
          delete eventsHash[data.record.id];
          const index = events.indexOf(event);
          if (index > -1) {
            events.splice(index, 1);
          }
        } else {
          addLogEntry("error", `Event ${data.record.id} not found`);
        }
      } else if (data.operation === "TEST") {
        //
      }
    });

    eventService.setHandler("error", (error) => {
      updateStatus("error", `Error: ${error.message || "Unknown error"}`);
    });

    eventService.setHandler("message", (event) => {

      if (typeof event === "object" && event.type) {
        addLogEntry(event.type, event.message, event.data);
      } else {
        addLogEntry("raw", "Raw message:", event);
      }
    });

    eventService.setHandler("close", () => {
      updateStatus("connecting", "Disconnected. Attempting to reconnect...");
    });

    // Clean up when leaving the page
    window.addEventListener("beforeunload", () => {
      eventService.close();
    });


  });

  function addLogEntry(type, message, data) {
        console.log(`[Log] ${type}: ${message}`, data || "");
  }

  function updateStatus(state, message) {
        console.log(`[Status] ${state}: ${message}`);
      }
</script>
